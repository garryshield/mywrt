name: GDQ

on:
  workflow_dispatch:
  push:
    paths:
      - "CHANGELOG.md"

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    strategy:
      fail-fast: false
      matrix:
        target: [t1]

    name: Build ${{matrix.target}}

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Set Env
        run: |
          source "user/common/env"
          source "user/${{matrix.target}}/env"

          echo "DATE=${DATE}"                                   >> $GITHUB_ENV
          echo "REPO_URL=${REPO_URL}"                           >> $GITHUB_ENV
          echo "REPO_BRANCH=${REPO_BRANCH}"                     >> $GITHUB_ENV

          cat $GITHUB_ENV

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          df -hT

      - name: Clone source code
        run: |
          git clone --depth 1 -b ${{env.REPO_BRANCH}} ${{env.REPO_URL}} openwrt
          tree -a -L 2 ./

      - name: Apply before hook
        run: |
          /bin/bash "user/common/hook.sh" before ${{matrix.target}}
          /bin/bash "user/${{matrix.target}}/hook.sh" before ${{matrix.target}}

      - name: Update feeds
        run: |
          cd openwrt
          ./scripts/feeds update -a

      - name: Install feeds
        run: |
          cd openwrt
          ./scripts/feeds install -a
          ./scripts/feeds install -a

      - name: Apply after hook
        run: |
          /bin/bash "user/common/hook.sh" after ${{matrix.target}}
          /bin/bash "user/${{matrix.target}}/hook.sh" after ${{matrix.target}}

      - name: Make config
        run: |
          cd openwrt
          make defconfig

      - name: Make download
        run: |
          cd openwrt
          make download -j$(nproc)
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile firmware
        run: |
          cd openwrt
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -hT
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Prepare artifact
        working-directory: ./openwrt
        run: |
          mkdir -p ../artifact/firmware
          mkdir -p ../artifact/packages
          mkdir -p ../artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ../artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ../artifact/packages/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ../artifact/buildinfo/

      # - name: Prepare artifact test
      #   working-directory: ./openwrt
      #   run: |
      #     mkdir -p ../artifact/firmware
      #     mkdir -p ../artifact/packages
      #     mkdir -p ../artifact/buildinfo

      #     touch ../artifact/firmware/1
      #     touch ../artifact/packages/1
      #     touch ../artifact/buildinfo/1

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{env.DATE}}-${{matrix.target}}-${{github.run_number}}
          release_name: ${{env.DATE}}-${{matrix.target}}-${{github.run_number}}
          body: |
            ${{env.DATE}}-${{matrix.target}}-${{github.run_number}}
          draft: false
          prerelease: false

      # bin
      - name: Upload bin
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt-bin-${{matrix.target}}-${{github.run_number}}
          path: ./openwrt/bin

      # firmware
      - name: Upload firmware
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt-firmware-${{matrix.target}}-${{github.run_number}}
          path: ./artifact/firmware/

      - name: Archive firmware
        uses: thedoctor0/zip-release@main
        with:
          directory: ./artifact/firmware/
          filename: OpenWrt-firmware.zip

      - name: Release firmware
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifact/firmware/OpenWrt-firmware.zip
          asset_name: OpenWrt-firmware.zip
          asset_content_type: application/zip

      # packages
      - name: Upload packages
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt-packages-${{matrix.target}}-${{github.run_number}}
          path: ./artifact/packages/

      - name: Archive packages
        uses: thedoctor0/zip-release@main
        with:
          directory: ./artifact/packages/
          filename: OpenWrt-packages.zip

      - name: Release packages
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifact/packages/OpenWrt-packages.zip
          asset_name: OpenWrt-packages.zip
          asset_content_type: application/zip

      # buildinfo
      - name: Upload buildinfo
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt-buildinfo-${{matrix.target}}-${{github.run_number}}
          path: ./artifact/buildinfo/

      - name: Archive buildinfo
        uses: thedoctor0/zip-release@main
        with:
          directory: ./artifact/buildinfo/
          filename: OpenWrt-buildinfo.zip

      - name: Release buildinfo
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifact/buildinfo/OpenWrt-buildinfo.zip
          asset_name: OpenWrt-buildinfo.zip
          asset_content_type: application/zip

      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          retain_days: 1
          keep_minimum_runs: 1
