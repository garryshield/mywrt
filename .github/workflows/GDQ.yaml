name: GDQ

on:
  workflow_dispatch:
  push:
    paths:
      - "CHANGELOG.md"

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Clone source code
        env:
          REPO_URL: https://github.com/coolsnowwolf/lede
          REPO_BRANCH: master
        run: |
          git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean

          df -h

      - name: Update feeds
        working-directory: ./openwrt
        run: |
          [ -e ../feeds.conf.default ] && mv ../feeds.conf.default ./feeds.conf.default
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          ./scripts/feeds install -a

      - name: Generate configuration file
        working-directory: ./openwrt
        run: |
          [ -e ../.config.t1 ] && mv ../.config.t1 ./.config
          make defconfig

      - name: Make download
        working-directory: ./openwrt
        run: |
          make download -j$(nproc)
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile firmware
        working-directory: ./openwrt
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Prepare artifact
        working-directory: ./openwrt
        run: |
          mkdir -p ../artifact/firmware
          mkdir -p ../artifact/package
          mkdir -p ../artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ../artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ../artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ../artifact/buildinfo/

      # - name: Prepare test
      #   run: |
      #     mkdir -p ./artifact/firmware
      #     mkdir -p ./artifact/package
      #     mkdir -p ./artifact/buildinfo
      #     echo '' > ./artifact/firmware/main
      #     echo '' > ./artifact/package/main
      #     echo '' > ./artifact/buildinfo/main

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            v${{ github.run_number }}
          draft: false
          prerelease: false

      # config
      - name: Upload firmware
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt_config
          path: ./openwrt/.config

      # firmware
      - name: Upload firmware
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt_firmware
          path: ./artifact/firmware/

      - name: Archive firmware
        uses: thedoctor0/zip-release@main
        with:
          directory: ./artifact/firmware/
          filename: OpenWrt_firmware.zip

      - name: Release firmware
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifact/firmware/OpenWrt_firmware.zip
          asset_name: OpenWrt_firmware.zip
          asset_content_type: application/zip

      # package
      - name: Upload package
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt_package
          path: ./artifact/package/

      - name: Archive package
        uses: thedoctor0/zip-release@main
        with:
          directory: ./artifact/package/
          filename: OpenWrt_package.zip

      - name: Release package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifact/package/OpenWrt_package.zip
          asset_name: OpenWrt_package.zip
          asset_content_type: application/zip

      # buildinfo
      - name: Upload buildinfo
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

      - name: Archive buildinfo
        uses: thedoctor0/zip-release@main
        with:
          directory: ./artifact/buildinfo/
          filename: OpenWrt_buildinfo.zip

      - name: Release buildinfo
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifact/buildinfo/OpenWrt_buildinfo.zip
          asset_name: OpenWrt_buildinfo.zip
          asset_content_type: application/zip
